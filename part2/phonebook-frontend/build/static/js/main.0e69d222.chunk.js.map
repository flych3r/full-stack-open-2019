{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Persons","persons","deletePerson","map","person","key","id","name","number","onClick","window","confirm","PersonForm","addNewPerson","newName","newNumber","handleNameChange","handleNumberChange","onSubmit","value","onChange","type","Filter","filterName","handleFilterChange","Notification","message","color","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setFilterName","setMessage","colorMessage","setColorMessage","useEffect","personServices","console","log","length","personsToShow","filter","toLowerCase","includes","event","target","preventDefault","found","find","changedPerson","setTimeout","catch","_","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e69d222.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({ persons, deletePerson }) => {\n\n  return (\n    <div>\n      {persons.map(person => \n        <div key={person.id}>\n          {person.name} {person.number}\n          <button onClick={() => deletePerson(person.id, window.confirm(`Delete ${person.name}?`))}>delete</button>\n        </div>)}\n    </div>\n  )\n\n}\n\nexport default Persons\n","import React from 'react'\n\nconst PersonForm = ({ addNewPerson, newName, newNumber, handleNameChange, handleNumberChange }) => {\n\n  return (\n    <div>\n      <form onSubmit={addNewPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({ filterName, handleFilterChange }) => {\n  \n  return (\n    <input value={filterName} onChange={handleFilterChange}/>\n  )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({ message, color }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (color) {\n    return (\n      <div className=\"message danger\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"message success\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteObject = id => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteObject }\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Persons from './components/Persons'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport personServices from './services/persons'\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterName, setFilterName ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ colorMessage, setColorMessage ] = useState(true)\n\n  useEffect(() => {\n    personServices\n      .getAll()\n      .then(response => {\n        console.log('promise fulfilled')\n        setPersons(response)\n      })\n  }, [])\n  console.log('response', persons.length, 'persons')  \n\n  const personsToShow = persons.filter(person => person.name.toLowerCase().includes(filterName.toLowerCase()))\n\n  const addNewPerson = (event) => {\n    event.preventDefault()\n\n    const found = persons.find(person => person.name === newName);\n    if(found) {\n      const updatePerson = window.confirm(`${found.name} is already in the phonebook,` + \n        ` replace the old number (${found.number})` +\n        ` with the new number (${newNumber})?`)\n      if (updatePerson){\n        const changedPerson = { ...found, number: newNumber }\n        personServices\n          .update(changedPerson.id, changedPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== response.id ? person : response))\n            setMessage(`Updated ${newName}`)\n            setColorMessage(false)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n          })\n          .catch(_ => {\n            setMessage(\n              `Information of ${newName} was already removed from server`\n            )\n            setColorMessage(true)\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000)\n            setPersons(persons.filter(person => person.id !== changedPerson.id))\n          })\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n      personServices\n        .create(newPerson)\n        .then(response => {\n          setPersons(persons.concat(response))\n          setMessage(`Added ${newName}`)\n          setColorMessage(false)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n  \n  const deletePerson = (id, confirm) => {\n    const found = persons.find(person => person.id === id);\n    if (confirm) {\n      personServices\n      .deleteObject(id)\n      .then(_ => {\n        setPersons(persons.filter(person => person.id !== id))\n        setMessage(`Deleted ${found.name}`)\n          setColorMessage(true)\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n      })\n      .catch(_ => {\n        setMessage(\n          `Information of ${found.name} was already removed from server`\n        )\n        setColorMessage(true)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setPersons(persons.filter(person => person.id !== id))\n      })\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterName(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} color={colorMessage} />\n      <Filter filterName={filterName} handleFilterChange={handleFilterChange} />\n      <h2>Add new</h2>\n      <PersonForm addNewPerson={addNewPerson} newName={newName} newNumber={newNumber}\n        handleNameChange={handleNameChange} handleNumberChange={handleNumberChange} />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}