{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","_","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,KCK3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,I,gBCeQ,EArBA,WACb,IAAMC,EAAUC,IAAMC,IAHR,cAIRC,EAAc,CAClBC,GAAI,IACJR,QAAS,mCACTS,KAAM,2BACNX,WAAW,GAEb,OAAOM,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAdR,aAcsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAnBF,aAmBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChBrCK,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGA0FSC,EArFH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAC5B,iBAJc,mBAGTG,EAHS,KAGAC,EAHA,OAMcJ,oBAAS,GANvB,mBAMTK,EANS,KAMAC,EANA,OAOwBN,mBAAS,0BAPjC,mBAOTO,EAPS,KAOKC,EAPL,KAShBC,qBAAU,WACRC,IAEKvB,MAAK,SAAAwB,GACNT,EAASS,QAEZ,IAEH,IAoCMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAAzC,GAAI,OAAIA,EAAKG,aAWhE,OACI,6BACA,qCACA,kBAAC,EAAD,CAAcK,QAAS2B,IACvB,6BACE,4BAAQ7B,QAAS,kBAAM4B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAnBeO,EAAYE,KAAI,SAAA1C,GAAI,OACrC,kBAAC,EAAD,CAAM2C,IAAK3C,EAAKa,GAAIb,KAAMA,EACxBC,iBAAkB,kBAvCK,SAAAY,GACzB,IAAMb,EAAO6B,EAAMe,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,eAAQ9C,EAAR,CAAcG,WAAYH,EAAKG,YAEhDmC,EACUzB,EAAIiC,GACT/B,MAAK,SAAAgC,GACNjB,EAASD,EAAMa,KAAI,SAAA1C,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAO+C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJpC,EAAKK,QADD,sCAGf6C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAI,GAAC,OAAIA,EAAEhC,KAAOA,SAuBdsC,CAAmBnD,EAAKa,WAoBhD,0BAAMuC,SAvCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBlD,QAAS0B,EACTjB,MAAM,IAAI0C,MAAOC,cACjBtD,UAAWuD,KAAKC,SAAW,IAG7BrB,EACUiB,GACLxC,MAAK,SAAAgC,GACNjB,EAASD,EAAMX,OAAO6B,IACtBf,EAAW,SA4BX,2BAAO4B,MAAO7B,EAAS8B,SAlBJ,SAACR,GACxBS,QAAQC,IAAIV,EAAMW,OAAOJ,OACzB5B,EAAWqB,EAAMW,OAAOJ,UAiBpB,4BAAQK,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MC9FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.95d59d0b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important \n    ? 'make not important' : 'make important'\n  \n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div> \n  )\n}\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\n    'a new note...'\n  )\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n        .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(_ => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n        .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n  const rows = () => notesToShow.map(note => \n    <Note key={note.id} note={note} \n      toggleImportance={() => toggleImportanceOf(note.id)} />\n  )\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n      <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n          {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n      </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}