{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","components/Togglable.js","components/LoginForm.js","components/LogoutForm.js","components/NoteForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","errorType","Footer","style","color","fontStyle","fontSize","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","LoginForm","username","password","handleLogin","setUsername","setPassword","onSubmit","type","value","name","onChange","target","LogoutForm","handleLogout","NoteForm","newNote","handleNoteChange","addNote","token","a","async","axios","get","response","data","newObject","config","headers","Authorization","post","id","put","newToken","credentials","App","notes","setNotes","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","setErrorType","user","setUser","noteFormRef","createRef","useEffect","noteService","then","initialNotes","loggedUserJSON","window","localStorage","getItem","usr","JSON","parse","setTimeout","event","preventDefault","current","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","notesToShow","filter","loginService","setItem","stringify","clear","map","key","find","n","changedNote","catch","_","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62f91957.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import React from 'react'\n\nconst Notification = ({ message, errorType }) => {\n  if (message === null) {\n    return null\n  }\n\n  if (errorType)\n    return (\n      <div className=\"notification error\">\n        {message}\n      </div>\n    )\n\n  return (\n    <div className=\"notification success\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n}\n\nexport default Footer\n","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Toggable'\n\nexport default Togglable\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({ username, password, handleLogin, setUsername, setPassword }) => {\n  return (\n    <div>\n      <h2>Login</h2>\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n          <input\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n          <input\n            type=\"text\"\n            value={password}\n            name=\"Password\"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n    </div>\n  )\n}\n\nLoginForm.propTypes = {\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired,\n  handleLogin: PropTypes.func.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n}\n\nexport default LoginForm\n","import React from 'react'\n\nconst LogoutForm = ({ handleLogout }) => {\n  return (\n    <button type=\"submit\" onClick={handleLogout}>logout</button>\n  )\n}\n\nexport default LogoutForm\n","import React from 'react'\n\nconst NoteForm = ({ newNote, handleNoteChange, addNote }) => {\n  return (\n    <form onSubmit={addNote}>\n      <input value={newNote} onChange={handleNoteChange}/>\n      <button type=\"submit\">save</button>\n    </form>\n  )\n}\n\nexport default NoteForm\n","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const response = await axios.put(`${baseUrl}/${id}`, newObject)\n  return response.data\n}\n\nexport default { getAll, create, update, setToken }\n","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport Togglable from './components/Togglable'\nimport LoginForm from './components/LoginForm'\nimport LogoutForm from './components/LogoutForm'\nimport NoteForm from './components/NoteForm'\nimport noteService from './services/notes'\nimport loginService from './services/login'\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [errorType, setErrorType] = useState(true)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  const noteFormRef = React.createRef()\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const usr = JSON.parse(loggedUserJSON)\n\n      noteService.setToken(usr.token)\n      setUser(usr)\n      setErrorMessage(`Welcome ${usr.username}`)\n      setErrorType(false)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(_ => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setErrorType(true)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    noteFormRef.current.toggleVisibility()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n  const rows = () => notesToShow.map(note =>\n    <Note key={note.id} note={note}\n      toggleImportance={() => toggleImportanceOf(note.id)} />\n  )\n\n  const loginForm = () => (\n    <Togglable buttonLabel='login'>\n      <LoginForm username={username} password={password} handleLogin={handleLogin}\n        setUsername={setUsername} setPassword={setPassword} />\n    </Togglable>\n  )\n\n  const logoutForm = () => (\n    <LogoutForm handleLogout={handleLogout} />\n  )\n\n  const noteForm = () => (\n    <Togglable buttonLabel='new note' ref={noteFormRef}>\n      <NoteForm newNote={newNote} handleNoteChange={handleNoteChange} addNote={addNote} />\n    </Togglable>\n  )\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const usr = await loginService.login({ username, password })\n\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(usr))\n      noteService.setToken(usr.token)\n\n      setUser(usr)\n      setUsername('')\n      setPassword('')\n      setErrorMessage(`Welcome ${usr.username}`)\n      setErrorType(false)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    } catch (exception) {\n      setErrorMessage('Wrong credentials')\n      setErrorType(true)\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleLogout = (event) => {\n    event.preventDefault()\n    setErrorMessage(`Bye ${user.username}`)\n    setUser(null)\n    window.localStorage.clear()\n    setErrorType(false)\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} errorType={errorType} />\n      {user === null ?\n        loginForm() :\n        <div>\n          <p>{user.name} logged in {logoutForm()}</p>\n          {noteForm()}\n        </div>\n      }\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}